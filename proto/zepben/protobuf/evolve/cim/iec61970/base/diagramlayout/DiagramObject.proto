// Copyright 2020 Zeppelin Bend Pty Ltd
// This file is part of evolve-grpc.
// 
// evolve-grpc is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// evolve-grpc is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
// 
// You should have received a copy of the GNU Affero General Public License
// along with evolve-grpc.  If not, see <https://www.gnu.org/licenses/>.

syntax = "proto3";
option java_multiple_files = true;
option java_package = "com.zepben.protobuf.cim.iec61970.base.diagramlayout";
option csharp_namespace = "Zepben.Protobuf.CIM.IEC61970.Base.DiagramLayout";
package zepben.protobuf.evolve.cim.iec61970.base.diagramlayout;

import "zepben/protobuf/evolve/cim/iec61970/base/diagramlayout/DiagramObjectPoint.proto";
import "zepben/protobuf/evolve/cim/iec61970/base/diagramlayout/DiagramObjectStyle.proto";
import "zepben/protobuf/evolve/cim/iec61970/base/core/IdentifiedObject.proto";

/**
 * An object that defines one or more points in a given space. This object can be associated with anything
 * that specializes IdentifiedObject. For single line diagrams such objects typically include such items as
 * analog values, breakers, disconnectors, power transformers, and transmission lines.
 */
message DiagramObject {

    /**
     * The IdentifiedObject fields for this DiagramObject.
     */
    core.IdentifiedObject io = 1;

    /**
     * A diagram object is part of a diagram.
     */
    string diagramMRID = 2;

    /**
     * The domain object to which this diagram object is associated.
     */
    string identifiedObjectMRID = 3;

    /**
     * A diagram object has a style associated that provides a reference for the style used in the originating system.
     */
    DiagramObjectStyle diagramObjectStyle = 4;

    /**
     * Sets the angle of rotation of the diagram object.  Zero degrees is pointing to the top of the diagram.  Rotation is clockwise.
     */
    double rotation = 5;

    /**
     * The diagram objects that are associated with the domain object.
     * <p>
     * The diagram objects are returned in a map sorted by the diagram they live in.
     */
    repeated DiagramObjectPoint diagramObjectPoints = 6;

}
