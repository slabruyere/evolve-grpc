# CONFIG_TYPE=JAVA_PYTHON_CS_LIB
# CONFIG_VERSION=1.0
#####################################################################################################################
# Documentation: https://bitbucket.org/zepben/how-tos/src/master/bitbucket_pipelines/release-management.md
# Custom Images used: https://bitbucket.org/zepben/vm-container-images/
#####################################################################################################################
image: zepben/pipeline-basic:3.0.0

options:
  max-time: 60

definitions:
  java-image: &java-image
    image: zepben/pipeline-java
  python-image: &python-image
    image: python:3.8-slim
  cs-image: &cs-image
    image: mcr.microsoft.com/dotnet/core/sdk:3.1
  caches:
    pb: ~/pb
    lc: ~/lc

  steps:
    - step: &java-run-build-step
        name: Build - Java
        <<: *java-image
        caches:
          - maven
        script:
          - cd java
          - mvn package -Dserver.username=$NEXUS_USERNAME -Dserver.password=$NEXUS_PASSWORD -Dserver.repo.url=$NEXUS_MAVEN_REPO
    - step: &cs-run-build-step
        name: Build - CSharp
        <<: *cs-image
        caches:
          - dotnetcore
        script:
          - cd cs
          - dotnet build evolve-grpc.sln -c Release
    - step: &python-run-build-step
        name: Build - Python
        <<: *python-image
        caches:
          - pip
        script:
          - cd python
          - python -m pip install -r requirements.txt
          - python build.py --fullclean
          - python build.py
    - step: &deploy-python
        name: Deploy Python Lib to Nexus repo
        <<: *python-image
        caches:
          - pip
        script:
          - cd python
          - python -m pip install twine
          - python -m pip install -r requirements.txt
          - python build.py --fullclean
          - python build.py --package
          - twine upload --repository-url "$ZEPBEN_PYPI_REPO" -u "$ZEPBEN_PYPI_USERNAME" -p "$ZEPBEN_PYPI_PASSWORD" dist/*
    - step: &deploy-java
        name: Deploy Java Lib to Nexus repo
        <<: *java-image
        caches:
          - maven
        script:
          - cd java
          - sed -i "s/{{access_key}}/$AWS_ACCESS_KEY/" ~/.aws/credentials
          - sed -i "s/{{secret_key}}/$AWS_SECRET_KEY/" ~/.aws/credentials
          - aws secretsmanager get-secret-value --secret-id zepben/gpgkey | jq '.SecretString' | cut -d\" -f2 | sed 's.\\n.\n.g' > zepben-gpg.key
          - gpg2 --batch --import zepben-gpg.key
          - mvn clean deploy -f pom.xml -P release,ossrh,!zepben-maven -Dserver.username=$OSSRH_USERNAME -Dserver.password=$OSSRH_PASSWORD -Dgpg.key.id=$GPG_KEY_ID -Dgpg.key.password=$GPG_KEY_PASSWORD
    - step: &deploy-cs
        name: Deploy CSharp Lib to Nexus repo
        <<: *cs-image
        caches:
          - dotnetcore
        script:
          - apt install -y curl
          - cd cs
          - curl --user $BB_AUTH_STRING $NUGET_SETTINGS -o Nuget.Config
          - sed -i "s|ZEPBEN_NUGET_FEED_USERNAME|${ZEPBEN_NUGET_FEED_USERNAME}|g; s|ZEPBEN_NUGET_FEED_PASSWORD|${ZEPBEN_NUGET_FEED_PASSWORD}|g;" Nuget.Config
          - dotnet restore evolve-grpc.csproj --configfile Nuget.Config
          - dotnet pack evolve-grpc.csproj -c Release -o ./ --no-restore
          - dotnet nuget push *.nupkg -k $ZEPBEN_NUGET_UPLOAD_KEY -s $ZEPBEN_NUGET_UPLOAD_FEED
    - step: &update-snapshot-version
        name: Update project version to next snapshot
        script:
          - git pull origin $BITBUCKET_BRANCH
          - source /scripts/common.sh
          - cd python
          - py-update-version --snapshot --no-commit setup.cfg
          - cd ../cs
          - cs-update-version --snapshot --no-commit evolve-grpc.csproj
          - commit_update_version $BITBUCKET_BRANCH
    - step: &update-protolock
        name: Update protolock status
        caches:
          - pb
        script:
          - cd proto/zepben
          # || true to ignore errors from wget (-nc returns 1 if file exists) - we will detect error later anyway.
          # Also don't retain version number to stop us auto-upgrading protolock.
          - wget -nc -O ~/pb/protolock.tgz $PROTOLOCK_URL || true
          - tar xzf ~/pb/protolock.tgz
          - ./protolock status
          - ./protolock commit 
          - git add proto.lock
          - if [[ $(git diff --staged --quiet proto.lock)$? == 1 ]]; then 
          - git commit -m "Update protolock status [skip ci]"
          - git remote set-url origin "https://${BB_AUTH_STRING}@bitbucket.org/$BITBUCKET_REPO_FULL_NAME"
          - git push origin $BITBUCKET_BRANCH
          - fi
    - step: &check-licence-step
        name: Check licence files and headers
        caches:
          - lc
        script:
          - curl -o ~/lc/licence-checker -L https://$BB_AUTH_STRING@api.bitbucket.org/2.0/repositories/${BITBUCKET_REPO_OWNER}/${LICENCE_CHECKER_REPO}/downloads/licence-checker
          - chmod +x ~/lc/licence-checker
          - find proto -regex "\(COPYING\|.*\.\(py\|java\|kt\|cs\|proto\|js\|ts\)\)$" | xargs -n1 ~/lc/licence-checker
    - step: &check-protolock
        name: Check protolock status
        caches:
          - pb
        script:
          - cd proto/zepben
          # || true to ignore errors from wget (-nc returns 1 if file exists) - we will detect error later anyway.
          # Also don't retain version number to stop us auto-upgrading protolock.
          - wget -nc -O ~/pb/protolock.tgz $PROTOLOCK_URL || true
          - tar xzf ~/pb/protolock.tgz
          - ./protolock status

pipelines:
  branches:
    master:
      - step: *check-licence-step
      - step: *update-protolock
      - parallel:
          - step: *deploy-python
          - step: *deploy-java
          - step: *deploy-cs
      - step: *update-snapshot-version
    LTS/*:
      - step: *check-licence-step
      - step: *update-protolock
      - parallel:
          - step: *deploy-python
          - step: *deploy-java
          - step: *deploy-cs
      - step: *update-snapshot-version
    hotfix/*:
      - step: *check-licence-step
      - step: *update-protolock
      - parallel:
          - step: *deploy-python
          - step: *deploy-java
          - step: *deploy-cs
      - step: *update-snapshot-version
  pull-requests:
    '**':
      - parallel:
          - step: *check-licence-step
          - step: *check-protolock
          - step: *java-run-build-step
          - step: *cs-run-build-step
          - step: *python-run-build-step
  custom:
    create-release:
      - step:
          name: Release checks and update version
          script:
            - source /scripts/common.sh
            - cd python
            - py-release-checks setup.cfg
            - git checkout -b release
            # finalize version
            - py-finalize-version --no-commit setup.cfg
            - cd ../java
            - java-mvn-release-checks pom.xml
            - java-mvn-finalize-version --no-commit pom.xml
            - cd ../cs
            - cs-finalize-version --no-commit evolve-grpc.csproj
            - commit_finalize_version
      - step:
          name: Deploy Python Lib to Nexus repo
          <<: *python-image
          caches:
            - pip
          script:
            - apt-get update && apt-get install -y git
            - git submodule update --init
            - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
            - git fetch --all
            - git checkout release
            - cd python
            - python -m pip install twine
            - python -m pip install -r requirements.txt
            - python build.py --fullclean
            - python build.py --package
            - twine upload --repository-url "$ZEPBEN_PYPI_REPO" -u "$ZEPBEN_PYPI_USERNAME" -p "$ZEPBEN_PYPI_PASSWORD" dist/*
          after-script:
            - if [ $BITBUCKET_EXIT_CODE -ne 0 ]; then
            - git push origin -d release
            - fi
      - step:
          name: Deploy Java Lib to Maven Central
          <<: *java-image
          caches:
            - maven
          script:
            - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
            - git fetch --all
            - git checkout release
            - cd java
            - sed -i "s/{{access_key}}/$AWS_ACCESS_KEY/" ~/.aws/credentials
            - sed -i "s/{{secret_key}}/$AWS_SECRET_KEY/" ~/.aws/credentials
            - aws secretsmanager get-secret-value --secret-id zepben/gpgkey | jq '.SecretString' | cut -d\" -f2 | sed 's.\\n.\n.g' > zepben-gpg.key
            - gpg2 --batch --import zepben-gpg.key
            - mvn clean deploy -f pom.xml -P release,ossrh,!zepben-maven -Dserver.username=$OSSRH_USERNAME -Dserver.password=$OSSRH_PASSWORD -Dgpg.key.id=$GPG_KEY_ID -Dgpg.key.password=$GPG_KEY_PASSWORD
          after-script:
            - if [ $BITBUCKET_EXIT_CODE -ne 0 ]; then
            - git push origin -d release
            - fi
      - step:
          name: Deploy CSharp Lib to Nexus repo
          <<: *cs-image
          caches:
            - dotnetcore
          script:
            - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
            - git fetch --all
            - git checkout release
            - apt install -y curl
            - cd cs
            - curl --user $BB_AUTH_STRING $NUGET_SETTINGS -o Nuget.Config
            - sed -i "s|ZEPBEN_NUGET_FEED_USERNAME|${ZEPBEN_NUGET_FEED_USERNAME}|g; s|ZEPBEN_NUGET_FEED_PASSWORD|${ZEPBEN_NUGET_FEED_PASSWORD}|g;" Nuget.Config
            - dotnet restore evolve-grpc.csproj --configfile Nuget.Config
            - dotnet pack evolve-grpc.csproj -c Release -o ./ --no-restore
            - dotnet nuget push *.nupkg -k $ZEPBEN_NUGET_UPLOAD_KEY -s $ZEPBEN_NUGET_UPLOAD_FEED
          after-script:
            - if [ $BITBUCKET_EXIT_CODE -ne 0 ]; then
            - git push origin -d release
            - fi
      - step:
          name: Merge and Tag
          script:
            - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
            - git fetch --all
            - git remote set-url origin "https://${BB_AUTH_STRING}@bitbucket.org/$BITBUCKET_REPO_FULL_NAME"
            - git merge origin/release
            - git push origin $BITBUCKET_BRANCH
            - cd python
            - version=$(grep "version[[:space:]]*=[[:space:]]*\"\?[0-9]\+\.[0-9]\+\.[0-9]\+\(b[0-9]\+\)\?\"\?" setup.cfg | grep -o "[0-9]\+\.[0-9]\+\.[0-9]\+\(b[0-9]\+\)\?")
            - git tag "v$version"
            - git push --tags
            - pipe: atlassian/slack-notify:0.3.6
              variables:
                WEBHOOK_URL: $SLACK_WEBHOOK
                MESSAGE: "evolve-grpc $version is available."
      - step:
          name: Update to next version
          script:
            - source /scripts/common.sh
            - if [[ $BITBUCKET_BRANCH = "hotfix/"* ]]; then
            - git push origin -d release
            - git push origin -d $BITBUCKET_BRANCH
            - exit 0
            - fi
            - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
            - git fetch --all
            - git checkout release
            - cd python
            - py-update-version --no-commit setup.cfg
            - cd ../java
            - java-mvn-update-version --no-commit pom.xml
            - cd ../cs
            - cs-update-version --no-commit evolve-grpc.csproj
            - commit_update_version
            - git remote set-url origin "https://${BB_AUTH_STRING}@bitbucket.org/$BITBUCKET_REPO_FULL_NAME"
            - git checkout $BITBUCKET_BRANCH
            - git pull
            - git merge release
            - git push origin $BITBUCKET_BRANCH
            - git push origin -d release
    create-LTS-branch:
      - step:
          name: Create LTS branch
          script:
            - create-branch --lts
            - export BITBUCKET_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            - cd python
            - py-update-version --no-commit setup.cfg
            - cd ../java
            - java-mvn-update-version --no-commit pom.xml
            - cd ../cs
            - cs-update-version --no-commit evolve-grpc.csproj
            - source /scripts/common.sh
            - commit_update_version $BITBUCKET_BRANCH

    create-hotfix-branch:
      - step:
          name: Create Hotfix branch
          script:
            - create-branch --hotfix
            - export BITBUCKET_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            - cd python
            - py-update-version --no-commit setup.cfg
            - cd ../java
            - java-mvn-update-version --no-commit pom.xml
            - cd ../cs
            - cs-update-version --no-commit evolve-grpc.csproj
            - source /scripts/common.sh
            - commit_update_version $BITBUCKET_BRANCH
